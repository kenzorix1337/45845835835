import asyncio
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.exceptions import ChatNotFound
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# =======================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =======================
API_TOKEN = '7572193789:AAFojoL6qFz9fgCSsa1UW0veamzCi4lRHIY'
CHANNEL_USERNAME = '@mebizzy'  # Username –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# =======================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
# =======================
referrals_db = "referrals.db"  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
players_db = "players.db"  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è players.db, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
conn = sqlite3.connect(players_db)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS players (chat_id INTEGER PRIMARY KEY, player_id INTEGER)")
conn.commit()
conn.close()

# =======================
# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# =======================
def main_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª'."""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì° –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª"))
    return keyboard

# =======================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
# =======================
def generate_signal():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –∑–≤–µ–∑–¥–æ—á–µ–∫, –ø—Ä–∏ —ç—Ç–æ–º –∑–≤–µ–∑–¥–æ—á–µ–∫ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ."""
    grid = []
    for _ in range(5):
        row = [random.choices(['üü¶', '‚≠êÔ∏è'], weights=[0.8, 0.2])[0] for _ in range(5)]
        grid.append(''.join(row))
    return '\n'.join(grid)

# =======================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
# =======================
async def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except ChatNotFound:
        return False

# =======================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –≤ referrals.db
# =======================
def is_referral_id(player_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ player_id –≤ –±–∞–∑–µ referrals.db."""
    conn = sqlite3.connect(referrals_db)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM referrals WHERE user_id = ?", (player_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# =======================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ players.db
# =======================
def add_to_players(chat_id, player_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç chat_id –∏ player_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö players.db."""
    conn = sqlite3.connect(players_db)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO players (chat_id, player_id) VALUES (?, ?)", (chat_id, player_id))
    conn.commit()
    conn.close()

# =======================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ª—é–±—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
# =======================
async def ensure_subscription(user_id, message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"),
            InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
        )
        await message.answer("ü§ñ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)
        return False
    return True

# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
# =======================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await ensure_subscription(user_id, message):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ players.db
    conn = sqlite3.connect(players_db)
    cursor = conn.cursor()
    cursor.execute("SELECT player_id FROM players WHERE chat_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        await message.answer("‚úÖ –í–∞—à ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì° –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª:", reply_markup=main_menu())
    else:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ÑπÔ∏è –ì–¥–µ –Ω–∞–π—Ç–∏ ID –∏–≥—Ä–æ–∫–∞?", url="https://telegra.ph/Gde-najti-ajdi-na-1win-12-17")
        )
        await message.answer("ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞:", reply_markup=keyboard)

# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∏–≥—Ä–æ–∫–∞
# =======================
@dp.message_handler(lambda message: not message.text.startswith("üì°"))
async def handle_player_id(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –∏–≥—Ä–æ–∫–∞."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await ensure_subscription(user_id, message):
        return

    try:
        player_id = int(message.text.strip())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –≤ –±–∞–∑–µ referrals.db
        if is_referral_id(player_id):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ players.db
            add_to_players(user_id, player_id)
            await message.answer("‚úÖ –í–∞—à ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì° –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª:", reply_markup=main_menu())
        else:
            await message.answer("‚õî –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")

    except ValueError:
        await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'üì° –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª'
# =======================
@dp.message_handler(lambda message: message.text == "üì° –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def send_signal_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª'."""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await ensure_subscription(user_id, message):
        return

    # –û—Ç—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–∏–≥–Ω–∞–ª–∞
    for i in range(10, 0, -1):
        await message.answer(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞... {i} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(1)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    signal = generate_signal()
    await message.answer(f"ü§ñ –°–∏–≥–Ω–∞–ª:\n{signal}", reply_markup=main_menu())

# =======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# =======================
@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def verify_subscription(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏."""
    is_subscribed = await check_subscription(callback_query.from_user.id)
    if is_subscribed:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ÑπÔ∏è –ì–¥–µ –Ω–∞–π—Ç–∏ ID –∏–≥—Ä–æ–∫–∞?", url="https://telegra.ph/Gde-najti-ajdi-na-1win-12-17")
        )
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–≥—Ä–æ–∫–∞:",
            reply_markup=keyboard
        )
    else:
        await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
